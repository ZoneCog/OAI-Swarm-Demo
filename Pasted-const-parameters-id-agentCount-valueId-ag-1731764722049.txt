const parameters = [
            {
                id: 'agentCount',
                valueId: 'agentCountValue',
                min: 5,
                max: 50,
                step: 1,
                immediate: true,
                initialValue: 50
            },
            {id: 'agentSpeed', valueId: 'speedValue', min: 1, max: 10, step: 0.5},
            {id: 'swarmCohesion', valueId: 'cohesionValue', min: 1, max: 10, step: 1},
            {id: 'swarmAlignment', valueId: 'alignmentValue', min: 1, max: 10, step: 1},
            {id: 'waveFrequency', valueId: 'waveFrequencyValue', min: 0.1, max: 2, step: 0.1},
            {id: 'waveAmplitude', valueId: 'waveAmplitudeValue', min: 10, max: 100, step: 5}
        ];
        
        parameters.forEach(param => {
            const slider = document.getElementById(param.id);
            const valueDisplay = document.getElementById(param.valueId);
            
            if (slider && valueDisplay) {
                // Set slider attributes
                slider.min = param.min;
                slider.max = param.max;
                slider.step = param.step;
                slider.value = param.initialValue || slider.value;
                
                // Set initial value
                if (param.initialValue !== undefined) {
                    valueDisplay.textContent = param.initialValue;
                    console.log(`Initialized ${param.id} slider with value: ${param.initialValue}`);
                    
                    // Send initial parameter update for agent count
                    if (param.id === 'agentCount') {
                        console.log(`Sending initial agent count update: ${param.initialValue}`);
                        this.sendParameterUpdate(param.id, param.initialValue);
                    }
                }

                // Update display and handle parameter changes with enhanced logging
                slider.oninput = () => {
                    try {
                        const value = parseFloat(slider.value);
                        console.log(`${param.id} slider value changed to: ${value}`);

                        // Additional validation for agent count
                        if (param.id === 'agentCount') {
                            if (value < param.min || value > param.max) {
                                console.error(`Invalid agent count: ${value}. Must be between ${param.min} and ${param.max}`);
                                return;
                            }
                            console.log(`Validating agent count: ${value} (range: ${param.min}-${param.max})`);
                        }

                        // Update display
                        valueDisplay.textContent = value;

                        // Handle parameter updates with proper logging
                        if (param.immediate || param.id === 'agentCount') {
                            console.log(`Sending immediate parameter update for ${param.id}: ${value}`);
                            this.sendParameterUpdate(param.id, value);
                        } else {
                            if (this.parameterUpdateTimeout) {
                                clearTimeout(this.parameterUpdateTimeout);
                            }
                            this.parameterUpdateTimeout = setTimeout(() => {
                                console.log(`Sending debounced parameter update for ${param.id}: ${value}`);
                                this.sendParameterUpdate(param.id, value);
                            }, 100);
                        }
                    } catch (error) {
                        console.error(`Error handling slider change for ${param.id}:`, error);
                    }
                };
            } else {
                console.error(`Could not find slider or value display elements for ${param.id}`);
            }
        });
